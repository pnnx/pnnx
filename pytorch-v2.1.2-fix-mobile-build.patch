diff -Nuarp pytorch-v2.1.2.orig/torch/csrc/jit/serialization/import.cpp pytorch-v2.1.2/torch/csrc/jit/serialization/import.cpp
--- pytorch-v2.1.2.orig/torch/csrc/jit/serialization/import.cpp	2023-12-15 10:03:31.000000000 +0800
+++ pytorch-v2.1.2/torch/csrc/jit/serialization/import.cpp	2023-12-15 15:29:14.274643042 +0800
@@ -274,7 +274,7 @@ Module ScriptModuleDeserializer::deseria
     }
   }
   if (reader_->hasRecord("model.json") && code_prefix_ == "code/") {
-#if !defined(C10_MOBILE) && !defined(C10_DISABLE_LEGACY_IMPORT)
+#if 0//!defined(C10_MOBILE) && !defined(C10_DISABLE_LEGACY_IMPORT)
     return torch::jit::LEGACY_deserialize(compilation_unit_, reader_, device_);
 #else
     AT_ERROR("Legacy model format is not supported on mobile.");
diff -Nuarp pytorch-v2.1.2.orig/torch/csrc/jit/serialization/pickle.cpp pytorch-v2.1.2/torch/csrc/jit/serialization/pickle.cpp
--- pytorch-v2.1.2.orig/torch/csrc/jit/serialization/pickle.cpp	2023-12-15 10:03:31.000000000 +0800
+++ pytorch-v2.1.2/torch/csrc/jit/serialization/pickle.cpp	2023-12-15 15:29:29.451642807 +0800
@@ -36,7 +36,7 @@ std::vector<char> pickle(
 // This has to live here instead of the C++ API to mirror torch.save since the
 // mobile build excludes the C++ API
 std::vector<char> pickle_save(const at::IValue& ivalue) {
-#ifndef C10_MOBILE
+#if 0//ndef C10_MOBILE
   // Pickle the IValue into an array of bytes
   std::vector<char> pickle_data;
   Pickler pickler([&](const char* buf, size_t size) {
