name: release
on:
  push:
    tags:
      - '*'

env:
  LIBTORCH_VERSION: 1.13.0
  TORCHVISION_VERSION: 0.14.0
  PROTOBUF_VERSION: 3.11.2
  CACHE_DATE: 20230217

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  ubuntu-deps:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: pnnx-patches
      uses: actions/checkout@v3
      with:
        path: pnnx-patches
    - name: cache-libtorch
      id: cache-libtorch
      uses: actions/cache@v3.3.1
      with:
        path: "libtorch"
        key: libtorch-${{ env.LIBTORCH_VERSION }}-ubuntu-${{ env.CACHE_DATE }}
    - name: libtorch
      if: steps.cache-libtorch.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/pytorch/pytorch/releases/download/v${{ env.LIBTORCH_VERSION }}/pytorch-v${{ env.LIBTORCH_VERSION }}.tar.gz
        tar -xf pytorch-v${{ env.LIBTORCH_VERSION }}.tar.gz
        cd pytorch-v${{ env.LIBTORCH_VERSION }}
        pip3 install -r requirements.txt
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.LIBTORCH_VERSION }}-fix-mobile-build.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.LIBTORCH_VERSION }}-no-link-system-lib.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.LIBTORCH_VERSION }}-fix-static-initialization.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_CAFFE2_OPS=OFF \
            -DBUILD_CUSTOM_PROTOBUF=OFF \
            -DBUILD_LITE_INTERPRETER=OFF \
            -DBUILD_PYTHON=OFF \
            -DINTERN_BUILD_MOBILE=ON \
            -DINTERN_DISABLE_AUTOGRAD=ON \
            -DINTERN_DISABLE_ONNX=ON \
            -DUSE_CUDA=OFF \
            -DUSE_DISTRIBUTED=OFF \
            -DUSE_ITT=OFF \
            -DUSE_KINETO=OFF \
            -DUSE_LITE_INTERPRETER_PROFILER=OFF \
            -DUSE_MKLDNN=OFF \
            -DUSE_NUMPY=OFF \
            -DUSE_OPENMP=OFF \
            -DUSE_SOURCE_DEBUG_ON_MOBILE=OFF \
            -DUSE_XNNPACK=OFF \
            ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: cache-torchvision
      id: cache-torchvision
      uses: actions/cache@v3.3.1
      with:
        path: "torchvision"
        key: torchvision-${{ env.TORCHVISION_VERSION }}-ubuntu-${{ env.CACHE_DATE }}
    - name: torchvision
      if: steps.cache-torchvision.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/pytorch/vision/archive/refs/tags/v${{ env.TORCHVISION_VERSION }}.zip -O vision-${{ env.TORCHVISION_VERSION }}.zip
        unzip -q vision-${{ env.TORCHVISION_VERSION }}.zip
        cd vision-${{ env.TORCHVISION_VERSION }}
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-${{ env.TORCHVISION_VERSION }}-ops-only.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-${{ env.TORCHVISION_VERSION }}-no-cuda-version.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/torchvision" -DTorch_DIR="$GITHUB_WORKSPACE/libtorch/share/cmake/Torch" -DCMAKE_BUILD_TYPE=MinSizeRel -DWITH_PNG=OFF -DWITH_JPEG=OFF ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: cache-protobuf
      id: cache-protobuf
      uses: actions/cache@v3.3.1
      with:
        path: "protobuf"
        key: protobuf-${{ env.PROTOBUF_VERSION }}-ubuntu-${{ env.CACHE_DATE }}
    - name: protobuf
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/protocolbuffers/protobuf/archive/v${{ env.PROTOBUF_VERSION }}.zip -O protobuf-${{ env.PROTOBUF_VERSION }}.zip
        unzip -q protobuf-${{ env.PROTOBUF_VERSION }}.zip
        cd protobuf-${{ env.PROTOBUF_VERSION }}
        mkdir -p build2; cd build2;
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/protobuf" -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=MinSizeRel ../cmake
        cmake --build . -j 2
        cmake --build . --target install/strip

  macos-deps:
    runs-on: macos-11
    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: pnnx-patches
      uses: actions/checkout@v3
      with:
        path: pnnx-patches
    - name: cache-libtorch
      id: cache-libtorch
      uses: actions/cache@v3.3.1
      with:
        path: "libtorch"
        key: libtorch-${{ env.LIBTORCH_VERSION }}-macos-${{ env.CACHE_DATE }}
    - name: libtorch
      if: steps.cache-libtorch.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/pytorch/pytorch/releases/download/v${{ env.LIBTORCH_VERSION }}/pytorch-v${{ env.LIBTORCH_VERSION }}.tar.gz
        tar -xf pytorch-v${{ env.LIBTORCH_VERSION }}.tar.gz
        cd pytorch-v${{ env.LIBTORCH_VERSION }}
        pip3 install -r requirements.txt
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.LIBTORCH_VERSION }}-fix-mobile-build.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.LIBTORCH_VERSION }}-no-link-system-lib.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.LIBTORCH_VERSION }}-fix-static-initialization.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_CAFFE2_OPS=OFF \
            -DBUILD_CUSTOM_PROTOBUF=OFF \
            -DBUILD_LITE_INTERPRETER=OFF \
            -DBUILD_PYTHON=OFF \
            -DINTERN_BUILD_MOBILE=ON \
            -DINTERN_DISABLE_AUTOGRAD=ON \
            -DINTERN_DISABLE_ONNX=ON \
            -DUSE_CUDA=OFF \
            -DUSE_DISTRIBUTED=OFF \
            -DUSE_ITT=OFF \
            -DUSE_KINETO=OFF \
            -DUSE_LITE_INTERPRETER_PROFILER=OFF \
            -DUSE_MKLDNN=OFF \
            -DUSE_NUMPY=OFF \
            -DUSE_OPENMP=OFF \
            -DUSE_SOURCE_DEBUG_ON_MOBILE=OFF \
            -DUSE_XNNPACK=OFF \
            ..
        cmake --build . -j 3
        cmake --build . --target install/strip
    - name: cache-torchvision
      id: cache-torchvision
      uses: actions/cache@v3.3.1
      with:
        path: "torchvision"
        key: torchvision-${{ env.TORCHVISION_VERSION }}-macos-${{ env.CACHE_DATE }}
    - name: torchvision
      if: steps.cache-torchvision.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/pytorch/vision/archive/refs/tags/v${{ env.TORCHVISION_VERSION }}.zip -O vision-${{ env.TORCHVISION_VERSION }}.zip
        unzip -q vision-${{ env.TORCHVISION_VERSION }}.zip
        cd vision-${{ env.TORCHVISION_VERSION }}
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-${{ env.TORCHVISION_VERSION }}-ops-only.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-${{ env.TORCHVISION_VERSION }}-no-cuda-version.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/torchvision" -DTorch_DIR="$GITHUB_WORKSPACE/libtorch/share/cmake/Torch" -DCMAKE_BUILD_TYPE=MinSizeRel -DWITH_PNG=OFF -DWITH_JPEG=OFF ..
        cmake --build . -j 3
        cmake --build . --target install/strip
    - name: cache-protobuf
      id: cache-protobuf
      uses: actions/cache@v3.3.1
      with:
        path: "protobuf"
        key: protobuf-${{ env.PROTOBUF_VERSION }}-macos-${{ env.CACHE_DATE }}
    - name: protobuf
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/protocolbuffers/protobuf/archive/v${{ env.PROTOBUF_VERSION }}.zip -O protobuf-${{ env.PROTOBUF_VERSION }}.zip
        unzip -q protobuf-${{ env.PROTOBUF_VERSION }}.zip
        cd protobuf-${{ env.PROTOBUF_VERSION }}
        mkdir -p build2; cd build2;
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/protobuf" -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=MinSizeRel ../cmake
        cmake --build . -j 3
        cmake --build . --target install/strip

  windows-deps:
    runs-on: windows-2019
    env:
      UseMultiToolTask: true
    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: pnnx-patches
      uses: actions/checkout@v3
      with:
        path: pnnx-patches
    - name: cache-libtorch
      id: cache-libtorch
      uses: actions/cache@v3.3.1
      with:
        path: "libtorch"
        key: libtorch-${{ env.LIBTORCH_VERSION }}-vs2019-${{ env.CACHE_DATE }}
    - name: libtorch
      if: steps.cache-libtorch.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://github.com/pytorch/pytorch/releases/download/v${{ env.LIBTORCH_VERSION }}/pytorch-v${{ env.LIBTORCH_VERSION }}.tar.gz -OutFile pytorch-v${{ env.LIBTORCH_VERSION }}.tar.gz
        7z x pytorch-v${{ env.LIBTORCH_VERSION }}.tar.gz
        7z x pytorch-v${{ env.LIBTORCH_VERSION }}.tar
        cd pytorch-v${{ env.LIBTORCH_VERSION }}
        pip3 install -r requirements.txt
        C:\msys64\usr\bin\patch.exe -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\pytorch-v${{ env.LIBTORCH_VERSION }}-fix-mobile-build.patch
        C:\msys64\usr\bin\patch.exe -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\pytorch-v${{ env.LIBTORCH_VERSION }}-no-link-system-lib.patch
        C:\msys64\usr\bin\patch.exe -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\pytorch-v${{ env.LIBTORCH_VERSION }}-fix-static-initialization.patch
        C:\msys64\usr\bin\patch.exe -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\pytorch-v${{ env.LIBTORCH_VERSION }}-set-python-executable.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_SHARED_LIBS=OFF `
            -DBUILD_CAFFE2_OPS=OFF `
            -DBUILD_CUSTOM_PROTOBUF=OFF `
            -DBUILD_LITE_INTERPRETER=OFF `
            -DBUILD_PYTHON=OFF `
            -DINTERN_BUILD_MOBILE=ON `
            -DINTERN_DISABLE_AUTOGRAD=ON `
            -DINTERN_DISABLE_ONNX=ON `
            -DUSE_CUDA=OFF `
            -DUSE_DISTRIBUTED=OFF `
            -DUSE_ITT=OFF `
            -DUSE_KINETO=OFF `
            -DUSE_LITE_INTERPRETER_PROFILER=OFF `
            -DUSE_MKLDNN=OFF `
            -DUSE_NUMPY=OFF `
            -DUSE_OPENMP=OFF `
            -DUSE_SOURCE_DEBUG_ON_MOBILE=OFF `
            -DUSE_XNNPACK=OFF `
            ..
        cmake --build . --config MinSizeRel -j 2
        cmake --build . --config MinSizeRel --target install
    - name: cache-torchvision
      id: cache-torchvision
      uses: actions/cache@v3.3.1
      with:
        path: "torchvision"
        key: torchvision-${{ env.TORCHVISION_VERSION }}-vs2019-${{ env.CACHE_DATE }}
    - name: torchvision
      if: steps.cache-torchvision.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://github.com/pytorch/vision/archive/refs/tags/v${{ env.TORCHVISION_VERSION }}.zip -OutFile vision-${{ env.TORCHVISION_VERSION }}.zip
        7z x vision-${{ env.TORCHVISION_VERSION }}.zip
        cd vision-${{ env.TORCHVISION_VERSION }}
        C:\msys64\usr\bin\patch.exe -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\vision-${{ env.TORCHVISION_VERSION }}-ops-only.patch
        C:\msys64\usr\bin\patch.exe -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\vision-${{ env.TORCHVISION_VERSION }}-no-cuda-version.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE/torchvision" -DTorch_DIR="$env:GITHUB_WORKSPACE/libtorch/share/cmake/Torch" -DCMAKE_BUILD_TYPE=MinSizeRel -DWITH_PNG=OFF -DWITH_JPEG=OFF ..
        cmake --build . --config MinSizeRel -j 2
        cmake --build . --config MinSizeRel --target install
    - name: cache-protobuf
      id: cache-protobuf
      uses: actions/cache@v3.3.1
      with:
        path: "protobuf"
        key: protobuf-${{ env.PROTOBUF_VERSION }}-vs2019-${{ env.CACHE_DATE }}
    - name: protobuf
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://github.com/protocolbuffers/protobuf/archive/v${{ env.PROTOBUF_VERSION }}.zip -OutFile protobuf-${{ env.PROTOBUF_VERSION }}.zip
        7z x ./protobuf-${{ env.PROTOBUF_VERSION }}.zip
        cd protobuf-${{ env.PROTOBUF_VERSION }}
        mkdir -p build2; cd build2;
        cmake -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE/protobuf" -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_MSVC_STATIC_RUNTIME=ON -DCMAKE_BUILD_TYPE=MinSizeRel ../cmake
        cmake --build . --config MinSizeRel -j 2
        cmake --build . --config MinSizeRel --target install

  ubuntu:
    needs: [setup, ubuntu-deps]
    runs-on: ubuntu-18.04
    env:
      PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-ubuntu
    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: checkout
      uses: actions/checkout@v3
    - name: cache-libtorch
      id: cache-libtorch
      uses: actions/cache@v3.3.1
      with:
        path: "libtorch"
        key: libtorch-${{ env.LIBTORCH_VERSION }}-ubuntu-${{ env.CACHE_DATE }}
    - name: cache-torchvision
      id: cache-torchvision
      uses: actions/cache@v3.3.1
      with:
        path: "torchvision"
        key: torchvision-${{ env.TORCHVISION_VERSION }}-ubuntu-${{ env.CACHE_DATE }}
    - name: cache-protobuf
      id: cache-protobuf
      uses: actions/cache@v3.3.1
      with:
        path: "protobuf"
        key: protobuf-${{ env.PROTOBUF_VERSION }}-ubuntu-${{ env.CACHE_DATE }}
    - name: ncnn
      uses: actions/checkout@v3
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DTorch_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" \
            -DTorchVision_INSTALL_DIR="$GITHUB_WORKSPACE/torchvision" \
            -DProtobuf_INCLUDE_DIR="$GITHUB_WORKSPACE/protobuf/include" \
            -DProtobuf_LIBRARIES="$GITHUB_WORKSPACE/protobuf/lib/libprotobuf.a" \
            -DProtobuf_PROTOC_EXECUTABLE="$GITHUB_WORKSPACE/protobuf/bin/protoc" \
            ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp README.md ${{ env.PACKAGENAME }}
        cp ncnn/tools/pnnx/build/install/bin/pnnx ${{ env.PACKAGENAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos:
    needs: [setup, macos-deps]
    runs-on: macos-11
    env:
      PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-macos
    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: checkout
      uses: actions/checkout@v3
    - name: cache-libtorch
      id: cache-libtorch
      uses: actions/cache@v3.3.1
      with:
        path: "libtorch"
        key: libtorch-${{ env.LIBTORCH_VERSION }}-macos-${{ env.CACHE_DATE }}
    - name: cache-torchvision
      id: cache-torchvision
      uses: actions/cache@v3.3.1
      with:
        path: "torchvision"
        key: torchvision-${{ env.TORCHVISION_VERSION }}-macos-${{ env.CACHE_DATE }}
    - name: cache-protobuf
      id: cache-protobuf
      uses: actions/cache@v3.3.1
      with:
        path: "protobuf"
        key: protobuf-${{ env.PROTOBUF_VERSION }}-macos-${{ env.CACHE_DATE }}
    - name: ncnn
      uses: actions/checkout@v3
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DTorch_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" \
            -DTorchVision_INSTALL_DIR="$GITHUB_WORKSPACE/torchvision" \
            -DProtobuf_INCLUDE_DIR="$GITHUB_WORKSPACE/protobuf/include" \
            -DProtobuf_LIBRARIES="$GITHUB_WORKSPACE/protobuf/lib/libprotobuf.a" \
            -DProtobuf_PROTOC_EXECUTABLE="$GITHUB_WORKSPACE/protobuf/bin/protoc" \
            ..
        cmake --build . -j 3
        cmake --build . --target install/strip
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp README.md ${{ env.PACKAGENAME }}
        cp ncnn/tools/pnnx/build/install/bin/pnnx ${{ env.PACKAGENAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows:
    needs: [setup, windows-deps]
    runs-on: windows-2019
    env:
      PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-windows
      UseMultiToolTask: true
    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: checkout
      uses: actions/checkout@v3
    - name: cache-libtorch
      id: cache-libtorch
      uses: actions/cache@v3.3.1
      with:
        path: "libtorch"
        key: libtorch-${{ env.LIBTORCH_VERSION }}-vs2019-${{ env.CACHE_DATE }}
    - name: cache-torchvision
      id: cache-torchvision
      uses: actions/cache@v3.3.1
      with:
        path: "torchvision"
        key: torchvision-${{ env.TORCHVISION_VERSION }}-vs2019-${{ env.CACHE_DATE }}
    - name: cache-protobuf
      id: cache-protobuf
      uses: actions/cache@v3.3.1
      with:
        path: "protobuf"
        key: protobuf-${{ env.PROTOBUF_VERSION }}-vs2019-${{ env.CACHE_DATE }}
    - name: ncnn
      uses: actions/checkout@v3
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DPNNX_BUILD_WITH_STATIC_CRT=ON `
            -DTorch_INSTALL_DIR="$env:GITHUB_WORKSPACE/libtorch" `
            -DTorchVision_INSTALL_DIR="$env:GITHUB_WORKSPACE/torchvision" `
            -DProtobuf_INCLUDE_DIR="$env:GITHUB_WORKSPACE/protobuf/include" `
            -DProtobuf_LIBRARIES="$env:GITHUB_WORKSPACE/protobuf/lib/libprotobuf.lib" `
            -DProtobuf_PROTOC_EXECUTABLE="$env:GITHUB_WORKSPACE/protobuf/bin/protoc.exe" `
            ..
        cmake --build . --config MinSizeRel -j 2
        cmake --build . --config MinSizeRel --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        Copy-Item -Verbose -Path "README.md" -Destination "${{ env.PACKAGENAME }}"
        Copy-Item -Verbose -Path "ncnn\tools\pnnx\build\install\bin\pnnx.exe" -Destination ${{ env.PACKAGENAME }}
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, ubuntu, macos, windows]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: Release ${{ needs.setup.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: upload-pnnx-ubuntu
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-ubuntu
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-pnnx-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-macos
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-pnnx-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-windows
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip
