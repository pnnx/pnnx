name: test
on: [pull_request]
# on:
#   push:
#     tags:
#       - '*'

env:
  LIBTORCH_VERSION: 2.3.0
  TORCHVISION_VERSION: 0.18.0
  PROTOBUF_VERSION: 21.12
  ONNXRUNTIME_VERSION: 1.17.3
  CACHE_DATE: 20240516

permissions:
  contents: read

jobs:
  setup:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  macos-arm64-deps:
    runs-on: macos-14
    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: pnnx-patches
      uses: actions/checkout@v4
      with:
        path: pnnx-patches
    - name: cache-libtorch
      id: cache-libtorch
      uses: actions/cache@v4.0.2
      with:
        path: "libtorch"
        key: libtorch-${{ env.LIBTORCH_VERSION }}-macos-arm64-${{ env.CACHE_DATE }}
    - name: libtorch
      if: steps.cache-libtorch.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/pytorch/pytorch/releases/download/v${{ env.LIBTORCH_VERSION }}/pytorch-v${{ env.LIBTORCH_VERSION }}.tar.gz
        tar -xf pytorch-v${{ env.LIBTORCH_VERSION }}.tar.gz
        cd pytorch-v${{ env.LIBTORCH_VERSION }}
        pip3 install -r requirements.txt
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.LIBTORCH_VERSION }}-fix-mobile-build.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.LIBTORCH_VERSION }}-no-link-system-lib.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.LIBTORCH_VERSION }}-fix-pocketfft-build.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v${{ env.LIBTORCH_VERSION }}-set-python-executable.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_CAFFE2_OPS=OFF \
            -DBUILD_CUSTOM_PROTOBUF=OFF \
            -DBUILD_LITE_INTERPRETER=OFF \
            -DBUILD_PYTHON=OFF \
            -DINTERN_BUILD_MOBILE=ON \
            -DINTERN_DISABLE_AUTOGRAD=ON \
            -DINTERN_DISABLE_ONNX=ON \
            -DUSE_CUDA=OFF \
            -DUSE_DISTRIBUTED=OFF \
            -DUSE_ITT=OFF \
            -DUSE_KINETO=OFF \
            -DUSE_LITE_INTERPRETER_PROFILER=OFF \
            -DUSE_MKLDNN=OFF \
            -DUSE_MPS=OFF \
            -DUSE_NUMPY=OFF \
            -DUSE_OPENMP=OFF \
            -DUSE_SOURCE_DEBUG_ON_MOBILE=OFF \
            -DUSE_XNNPACK=OFF \
            ..
        cmake --build . -j 3
        cmake --build . -j 3 --target install/strip
    - name: cache-torchvision
      id: cache-torchvision
      uses: actions/cache@v4.0.2
      with:
        path: "torchvision"
        key: torchvision-${{ env.TORCHVISION_VERSION }}-macos-arm64-${{ env.CACHE_DATE }}
    - name: torchvision
      if: steps.cache-torchvision.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/pytorch/vision/archive/refs/tags/v${{ env.TORCHVISION_VERSION }}.zip -O vision-${{ env.TORCHVISION_VERSION }}.zip
        unzip -q vision-${{ env.TORCHVISION_VERSION }}.zip
        cd vision-${{ env.TORCHVISION_VERSION }}
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-${{ env.TORCHVISION_VERSION }}-ops-only.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-${{ env.TORCHVISION_VERSION }}-no-cuda-version.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/torchvision" -DTorch_DIR="$GITHUB_WORKSPACE/libtorch/share/cmake/Torch" -DCMAKE_BUILD_TYPE=MinSizeRel -DWITH_PNG=OFF -DWITH_JPEG=OFF ..
        cmake --build . -j 3
        cmake --build . -j 3 --target install/strip

    - name: cache-onnxruntime
      id: cache-onnxruntime
      uses: actions/cache@v4.0.2
      with:
        path: "onnxruntime"
        key: onnxruntime-${{ env.ONNXRUNTIME_VERSION }}-macos-arm64-${{ env.CACHE_DATE }}-2
    - name: onnxruntime
      if: steps.cache-onnxruntime.outputs.cache-hit != 'true'
      run: |
        wget -q https://github.com/protocolbuffers/protobuf/archive/v${{ env.PROTOBUF_VERSION }}.zip -O protobuf-${{ env.PROTOBUF_VERSION }}.zip
        unzip -q protobuf-${{ env.PROTOBUF_VERSION }}.zip
        cd protobuf-${{ env.PROTOBUF_VERSION }}
        mkdir -p build2; cd build2;
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/onnxruntime" -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_POSITION_INDEPENDENT_CODE=ON ..
        cmake --build . -j 3
        cmake --build . -j 3 --target install/strip
        cd ../../
        wget -q https://github.com/microsoft/onnxruntime/archive/v${{ env.ONNXRUNTIME_VERSION }}.zip -O onnxruntime-${{ env.ONNXRUNTIME_VERSION }}.zip
        ditto -V -x -k --sequesterRsrc --rsrc onnxruntime-${{ env.ONNXRUNTIME_VERSION }}.zip ./
        cd onnxruntime-${{ env.ONNXRUNTIME_VERSION }}
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/onnxruntime-${{ env.ONNXRUNTIME_VERSION }}-less-mlas-features.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/onnxruntime-${{ env.ONNXRUNTIME_VERSION }}-monolithic-static-library.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/onnxruntime-${{ env.ONNXRUNTIME_VERSION }}-use-clog.patch
        mkdir -p build2; cd build2;
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/onnxruntime" -DCMAKE_BUILD_TYPE=MinSizeRel -Donnxruntime_USE_FULL_PROTOBUF=ON -Donnxruntime_BUILD_SHARED_LIB=ON -Donnxruntime_BUILD_UNIT_TESTS=OFF -Donnxruntime_ENABLE_CPUINFO=OFF -Donnxruntime_DISABLE_CONTRIB_OPS=ON -Donnxruntime_DISABLE_SPARSE_TENSORS=ON --compile-no-warning-as-error -DCMAKE_POSITION_INDEPENDENT_CODE=ON ../cmake
        cmake --build . -j 3
        cmake --build . -j 3 --target install/strip

  macos-arm64:
    needs: [setup, macos-arm64-deps]
    runs-on: macos-14
    env:
      PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-macos-arm64
    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: checkout
      uses: actions/checkout@v4
    - name: cache-libtorch
      id: cache-libtorch
      uses: actions/cache@v4.0.2
      with:
        path: "libtorch"
        key: libtorch-${{ env.LIBTORCH_VERSION }}-macos-arm64-${{ env.CACHE_DATE }}
    - name: cache-torchvision
      id: cache-torchvision
      uses: actions/cache@v4.0.2
      with:
        path: "torchvision"
        key: torchvision-${{ env.TORCHVISION_VERSION }}-macos-arm64-${{ env.CACHE_DATE }}
    - name: cache-onnxruntime
      id: cache-onnxruntime
      uses: actions/cache@v4.0.2
      with:
        path: "onnxruntime"
        key: onnxruntime-${{ env.ONNXRUNTIME_VERSION }}-macos-arm64-${{ env.CACHE_DATE }}-2
    - name: ncnn
      uses: actions/checkout@v4
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DTorch_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" \
            -DTorchVision_INSTALL_DIR="$GITHUB_WORKSPACE/torchvision" \
            -Donnxruntime_INSTALL_DIR="$GITHUB_WORKSPACE/onnxruntime" \
            -DProtobuf_INCLUDE_DIR="$GITHUB_WORKSPACE/onnxruntime/include" \
            -DProtobuf_LIBRARIES="$GITHUB_WORKSPACE/onnxruntime/lib/libprotobuf.a" \
            -DProtobuf_PROTOC_EXECUTABLE="$GITHUB_WORKSPACE/onnxruntime/bin/protoc" \
            ..
        cmake --build . -j 3
        cmake --build . --target install/strip
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp README.md ${{ env.PACKAGENAME }}
        cp ncnn/tools/pnnx/build/install/bin/pnnx ${{ env.PACKAGENAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip
